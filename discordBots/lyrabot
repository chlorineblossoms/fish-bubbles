//just a tiny discord bot i made so my cat could say meow and react to messages.

const discord = require("discord.js");

const TOKEN = "REDACTED";
const emojiName = "LIKE"; //this only works with custom emojis atm, idk how to use globals 
const messageContent = "like this message";

//create and log in client
const client = new discord.Client();
client.login(TOKEN).then(() => {
    console.log(`logged in as ${client.user.tag}`);
    registerListeners();
}).catch(reason => {
    console.log(`problem while logging in bot: ${reason}`);
    process.exit();
});

client.on("ready", () => {
  console.log("ready to rumble uwu");
});

client.on('ready', () => {
  client.user.setGame("with a toy!");
});


client.on("message", (message) => {

message.content.toLowerCase;

if (message.author.bot) return

msg = message.content.toLowerCase();

  if (msg.includes("sock")) {
    message.channel.send("SOCK DETECTED!");
}

  if (msg.includes("lyra")) {
    message.channel.send("meow!");
  }
});

//looks for emoji and registers a message handler
function registerListeners() {
    let emoji = client.emojis.find("name", emojiName);
    if (emoji === null) {
        console.log(`Unable to find emoji with name '${emojiName}'`);
        process.exit(0);
        return;
    }
    client.on("message", message => {
        if (message.content === messageContent) {
            message.react(emoji).then(() => {
                console.log("reacted to message")
            }).catch(reason => {
                console.log(`problem while reacting to message: ${reason}`);
            });
        }
    });
}

//on process exit stuff
const cleanupFunc = async (code) => {
    await client.destroy();
    process.exit(code);
};

process.once("exit", cleanupFunc);
process.once("SIGINT", cleanupFunc);
process.once("SIGTERM", cleanupFunc);
process.once("unhandledRejection", (async (reason, promise) => {
    console.log("Unhandled promise rejection at: Promise", promise, "reason:", reason);
    await cleanupFunc(0);
}));
process.once("uncaughtException", async error => {
    console.log(error.stack);
    await cleanupFunc(0);
});
